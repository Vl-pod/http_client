(()=>{"use strict";var e,t,r,n,o,c,i,a={76:(e,t,r)=>{r(177);class n{createEl(e){return`\n    <div class="task" data-id="${e.id}">\n    <div class="task-main">\n        <input type="checkbox" class="check" ${e.status?"checked":""}>\n        <p class="title-task">${e.name}</p>\n        <div class="data">${e.created}</div>\n        <div>\n\t\t\t\t\n            <button class="btn btn-edit">red</button>\n            <button class="btn btn-delete">delete</button>\n        </div>\n\n    </div>\n    </div>\n    `}}async function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const r=await fetch(e,{method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",referrerPolicy:"no-referrer",body:JSON.stringify(t)});return await r.json()}async function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";const t=await fetch(e,{method:"GET",mode:"cors",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",referrerPolicy:"no-referrer"});return await t.json()}document.querySelector(".container");const i=document.querySelector(".btn-addTicket"),a=document.querySelector(".addForm"),d=document.querySelector("[data-btn=close]"),s=document.querySelector("[data-btn=send]"),l=document.querySelector("[data-input=title-tasck]"),u=document.querySelector("[data-input=description-tasck]"),p=document.querySelector(".EditForm"),f=document.querySelector("[data-btn=EditForm__close]"),h=document.querySelector("[data-btn=EditForm__send]"),v=document.querySelector("[data-input=title-tasck-edit]"),m=document.querySelector("[data-input=description-tasck-edit]"),y=document.querySelector(".popup-delete"),g=document.querySelector("[data-btn=popup-delete__close]"),b=document.querySelector("[data-btn=popup-delete__send]");window.addEventListener("DOMContentLoaded",(async()=>{try{(await async function(){return c("https://http-server-ubns.onrender.com/api/ticket/getAll")}()).forEach((e=>{const t=(new n).createEl(e);E.innerHTML+=t}))}catch(e){console.error(e)}}));const E=document.querySelector(".list");document.querySelector(".title-task"),i.addEventListener("click",(e=>{e.preventDefault(),a.classList.add("active")})),d.addEventListener("click",(e=>{e.preventDefault(),a.classList.remove("active")})),s.addEventListener("click",(e=>{e.preventDefault(),o("https://http-server-ubns.onrender.com/api/ticket/create",{name:l.value,description:u.value}).then((e=>{const t=(new n).createEl(e);E.innerHTML+=t})),l.value="",u.value="",a.classList.remove("active")})),E.addEventListener("click",(async e=>{if(e.target.classList.contains("title-task")){const t=e.target.closest(".task"),r=t.getAttribute("data-id"),n=t.querySelector(".description-task");if(n)return t.removeChild(n),void t.classList.remove("active");try{const e=await async function(e){return c(`https://http-server-ubns.onrender.com/api/ticket/${e}`)}(r);console.log(e);const n=document.createElement("p");n.classList.add("description-task","active"),n.textContent=e,t.appendChild(n)}catch(e){console.error(e)}}if(e.target.classList.contains("btn-edit")){p.classList.add("active");const t=e.target.closest(".task"),r=t.getAttribute("data-id"),n=t.querySelector(".title-task");f.addEventListener("click",(e=>{e.preventDefault(),p.classList.remove("active")})),h.addEventListener("click",(e=>{e.preventDefault();const t={name:v.value,description:m.value};o(`https://http-server-ubns.onrender.com/api/ticket/edit/${r}`,t).then((e=>{e&&(n.textContent=v.value,m.value="",v.value="",p.classList.remove("active"))}))}))}if(e.target.classList.contains("btn-delete")){y.classList.add("active");const t=e.target.closest(".task"),r=t.getAttribute("data-id");g.addEventListener("click",(e=>{e.preventDefault(),y.classList.remove("active")})),b.addEventListener("click",(e=>{e.preventDefault(),async function(e){c(`https://http-server-ubns.onrender.com/api/ticket/delete/${e}`)}(r),y.classList.remove("active"),t.remove()}))}if(e.target.classList.contains("check")){const t=e.target;o(`https://http-server-ubns.onrender.com/api/ticket/edit/${e.target.closest(".task").getAttribute("data-id")}`,{status:t.checked})}}))},783:(e,t,r)=>{var n=r(618),o=Object.create(null),c="undefined"==typeof document,i=Array.prototype.forEach;function a(){}function d(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(l(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.addEventListener("error",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function s(){var e=document.querySelectorAll("link");i.call(e,(function(e){!0!==e.visited&&d(e)}))}function l(e){return!!/^https?:/i.test(e)}e.exports=function(e,t){if(c)return console.log("no window.document found, will not HMR CSS"),a;var r,u,p=function(e){var t=o[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),c=r[r.length-1];c&&(t=c.src)}o[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),o=r&&r[1];return o&&e?e.split(",").map((function(e){var r=new RegExp("".concat(o,"\\.js$"),"g");return n(t.replace(r,"".concat(e.replace(/{fileName}/g,o),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=p(t.filename),r=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return i.call(t,(function(t){if(t.href){var o=function(e,t){var r;return e=n(e,{stripWWW:!1}),t.some((function(n){e.indexOf(t)>-1&&(r=n)})),r}(t.href,e);l(o)&&!0!==t.visited&&o&&(d(t,o),r=!0)}})),r}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void s();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),s())},50,u=0,function(){var e=this,t=arguments;clearTimeout(u),u=setTimeout((function(){return r.apply(e,t)}),50)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),n=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+n+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},177:(e,t,r)=>{var n=r(783)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)}},d={};function s(e){var t=d[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var r=d[e]={id:e,exports:{}};try{var n={id:e,module:r,factory:a[e],require:s};s.i.forEach((function(e){e(n)})),r=n.module,n.factory.call(r.exports,r,r.exports,n.require)}catch(e){throw r.error=e,e}return r.exports}s.m=a,s.c=d,s.i=[],s.hu=e=>e+"."+s.h()+".hot-update.js",s.miniCssF=e=>"main.css",s.hmrF=()=>"main."+s.h()+".hot-update.json",s.h=()=>"d40759aeaf9c565d7bb2",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="client:",s.l=(r,n,o,c)=>{if(e[r])e[r].push(n);else{var i,a;if(void 0!==o)for(var d=document.getElementsByTagName("script"),l=0;l<d.length;l++){var u=d[l];if(u.getAttribute("src")==r||u.getAttribute("data-webpack")==t+o){i=u;break}}i||(a=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,s.nc&&i.setAttribute("nonce",s.nc),i.setAttribute("data-webpack",t+o),i.src=r),e[r]=[n];var p=(t,n)=>{i.onerror=i.onload=null,clearTimeout(f);var o=e[r];if(delete e[r],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((e=>e(n))),t)return t(n)},f=setTimeout(p.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=p.bind(null,i.onerror),i.onload=p.bind(null,i.onload),a&&document.head.appendChild(i)}},(()=>{var e,t,r,n={},o=s.c,c=[],i=[],a="idle",d=0,l=[];function u(e){a=e;for(var t=[],r=0;r<i.length;r++)t[r]=i[r].call(null,e);return Promise.all(t)}function p(){0==--d&&u("ready").then((function(){if(0===d){var e=l;l=[];for(var t=0;t<e.length;t++)e[t]()}}))}function f(e){if("idle"!==a)throw new Error("check() is only allowed in idle status");return u("check").then(s.hmrM).then((function(r){return r?u("prepare").then((function(){var n=[];return t=[],Promise.all(Object.keys(s.hmrC).reduce((function(e,o){return s.hmrC[o](r.c,r.r,r.m,e,t,n),e}),[])).then((function(){return t=function(){return e?v(e):u("ready").then((function(){return n}))},0===d?t():new Promise((function(e){l.push((function(){e(t())}))}));var t}))})):u(m()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==a?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+a+")")})):v(e)}function v(e){e=e||{},m();var n=t.map((function(t){return t(e)}));t=void 0;var o=n.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return u("abort").then((function(){throw o[0]}));var c=u("dispose");n.forEach((function(e){e.dispose&&e.dispose()}));var i,a=u("apply"),d=function(e){i||(i=e)},s=[];return n.forEach((function(e){if(e.apply){var t=e.apply(d);if(t)for(var r=0;r<t.length;r++)s.push(t[r])}})),Promise.all([c,a]).then((function(){return i?u("fail").then((function(){throw i})):r?v(e).then((function(e){return s.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):u("idle").then((function(){return s}))}))}function m(){if(r)return t||(t=[]),Object.keys(s.hmrI).forEach((function(e){r.forEach((function(r){s.hmrI[e](r,t)}))})),r=void 0,!0}s.hmrD=n,s.i.push((function(l){var v,m,y,g,b=l.module,E=function(t,r){var n=o[r];if(!n)return t;var i=function(i){if(n.hot.active){if(o[i]){var a=o[i].parents;-1===a.indexOf(r)&&a.push(r)}else c=[r],e=i;-1===n.children.indexOf(i)&&n.children.push(i)}else console.warn("[HMR] unexpected require("+i+") from disposed module "+r),c=[];return t(i)},s=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(r){t[e]=r}}};for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&"e"!==l&&Object.defineProperty(i,l,s(l));return i.e=function(e){return function(e){switch(a){case"ready":u("prepare");case"prepare":return d++,e.then(p,p),e;default:return e}}(t.e(e))},i}(l.require,l.id);b.hot=(v=l.id,m=b,g={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:y=e!==v,_requireSelf:function(){c=m.parents.slice(),e=y?void 0:v,s(v)},active:!0,accept:function(e,t,r){if(void 0===e)g._selfAccepted=!0;else if("function"==typeof e)g._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)g._acceptedDependencies[e[n]]=t||function(){},g._acceptedErrorHandlers[e[n]]=r;else g._acceptedDependencies[e]=t||function(){},g._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)g._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)g._declinedDependencies[e[t]]=!0;else g._declinedDependencies[e]=!0},dispose:function(e){g._disposeHandlers.push(e)},addDisposeHandler:function(e){g._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=g._disposeHandlers.indexOf(e);t>=0&&g._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,a){case"idle":t=[],Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](v,t)})),u("ready");break;case"ready":Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](v,t)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(v)}},check:f,apply:h,status:function(e){if(!e)return a;i.push(e)},addStatusHandler:function(e){i.push(e)},removeStatusHandler:function(e){var t=i.indexOf(e);t>=0&&i.splice(t,1)},data:n[v]},e=void 0,g),b.parents=c,b.children=[],c=[],l.require=E})),s.hmrC={},s.hmrI={}})(),(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var n=r.length-1;n>-1&&!e;)e=r[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),r=(e,t,r,n)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=c=>{if(o.onerror=o.onload=null,"load"===c.type)r();else{var i=c&&("load"===c.type?"missing":c.type),a=c&&c.target&&c.target.href||t,d=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");d.code="CSS_CHUNK_LOAD_FAILED",d.type=i,d.request=a,o.parentNode.removeChild(o),n(d)}},o.href=t,document.head.appendChild(o),o},n=(e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var o=(i=r[n]).getAttribute("data-href")||i.getAttribute("href");if("stylesheet"===i.rel&&(o===e||o===t))return i}var c=document.getElementsByTagName("style");for(n=0;n<c.length;n++){var i;if((o=(i=c[n]).getAttribute("data-href"))===e||o===t)return i}},o=[],c=[],i=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var t=o[e];t.parentNode&&t.parentNode.removeChild(t)}o.length=0},apply:()=>{for(var e=0;e<c.length;e++)c[e].rel="stylesheet";c.length=0}}),s.hmrC.miniCss=(e,t,a,d,l,u)=>{l.push(i),e.forEach((e=>{var t=s.miniCssF(e),i=s.p+t,a=n(t,i);a&&d.push(new Promise(((t,n)=>{var d=r(e,i,(()=>{d.as="style",d.rel="preload",t()}),n);o.push(a),c.push(d)})))}))},(()=>{var e,t,r,n,o,c=s.hmrS_jsonp=s.hmrS_jsonp||{179:0},i={};function a(t,r){return e=r,new Promise(((e,r)=>{i[t]=e;var n=s.p+s.hu(t),o=new Error;s.l(n,(e=>{if(i[t]){i[t]=void 0;var n=e&&("load"===e.type?"missing":e.type),c=e&&e.target&&e.target.src;o.message="Loading hot update chunk "+t+" failed.\n("+n+": "+c+")",o.name="ChunkLoadError",o.type=n,o.request=c,r(o)}}))}))}function d(e){function i(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var o=n.pop(),c=o.id,i=o.chain,d=s.c[c];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:c};if(d.hot._main)return{type:"unaccepted",chain:i,moduleId:c};for(var l=0;l<d.parents.length;l++){var u=d.parents[l],p=s.c[u];if(p){if(p.hot._declinedDependencies[c])return{type:"declined",chain:i.concat([u]),moduleId:c,parentId:u};-1===t.indexOf(u)&&(p.hot._acceptedDependencies[c]?(r[u]||(r[u]=[]),a(r[u],[c])):(delete r[u],t.push(u),n.push({chain:i.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}s.f&&delete s.f.jsonpHmr,t=void 0;var d={},l=[],u={},p=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var f in r)if(s.o(r,f)){var h,v=r[f],m=!1,y=!1,g=!1,b="";switch((h=v?i(f):{type:"disposed",moduleId:f}).chain&&(b="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(m=new Error("Aborted because of self decline: "+h.moduleId+b));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+b));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(m=new Error("Aborted because "+f+" is not accepted"+b));break;case"accepted":e.onAccepted&&e.onAccepted(h),y=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(m)return{error:m};if(y)for(f in u[f]=v,a(l,h.outdatedModules),h.outdatedDependencies)s.o(h.outdatedDependencies,f)&&(d[f]||(d[f]=[]),a(d[f],h.outdatedDependencies[f]));g&&(a(l,[h.moduleId]),u[f]=p)}r=void 0;for(var E,k=[],w=0;w<l.length;w++){var _=l[w],S=s.c[_];S&&(S.hot._selfAccepted||S.hot._main)&&u[_]!==p&&!S.hot._selfInvalidated&&k.push({module:_,require:S.hot._requireSelf,errorHandler:S.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete c[e]})),n=void 0;for(var t,r=l.slice();r.length>0;){var o=r.pop(),i=s.c[o];if(i){var a={},u=i.hot._disposeHandlers;for(w=0;w<u.length;w++)u[w].call(null,a);for(s.hmrD[o]=a,i.hot.active=!1,delete s.c[o],delete d[o],w=0;w<i.children.length;w++){var p=s.c[i.children[w]];p&&(e=p.parents.indexOf(o))>=0&&p.parents.splice(e,1)}}}for(var f in d)if(s.o(d,f)&&(i=s.c[f]))for(E=d[f],w=0;w<E.length;w++)t=E[w],(e=i.children.indexOf(t))>=0&&i.children.splice(e,1)},apply:function(t){for(var r in u)s.o(u,r)&&(s.m[r]=u[r]);for(var n=0;n<o.length;n++)o[n](s);for(var c in d)if(s.o(d,c)){var i=s.c[c];if(i){E=d[c];for(var a=[],p=[],f=[],h=0;h<E.length;h++){var v=E[h],m=i.hot._acceptedDependencies[v],y=i.hot._acceptedErrorHandlers[v];if(m){if(-1!==a.indexOf(m))continue;a.push(m),p.push(y),f.push(v)}}for(var g=0;g<a.length;g++)try{a[g].call(null,E)}catch(r){if("function"==typeof p[g])try{p[g](r,{moduleId:c,dependencyId:f[g]})}catch(n){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:c,dependencyId:f[g],error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:c,dependencyId:f[g],error:r}),e.ignoreErrored||t(r)}}}for(var b=0;b<k.length;b++){var w=k[b],_=w.module;try{w.require(_)}catch(r){if("function"==typeof w.errorHandler)try{w.errorHandler(r,{moduleId:_,module:s.c[_]})}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:_,error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:_,error:r}),e.ignoreErrored||t(r)}}return l}}}self.webpackHotUpdateclient=(t,n,c)=>{for(var a in n)s.o(n,a)&&(r[a]=n[a],e&&e.push(a));c&&o.push(c),i[t]&&(i[t](),i[t]=void 0)},s.hmrI.jsonp=function(e,t){r||(r={},o=[],n=[],t.push(d)),s.o(r,e)||(r[e]=s.m[e])},s.hmrC.jsonp=function(e,i,l,u,p,f){p.push(d),t={},n=i,r=l.reduce((function(e,t){return e[t]=!1,e}),{}),o=[],e.forEach((function(e){s.o(c,e)&&void 0!==c[e]?(u.push(a(e,f)),t[e]=!0):t[e]=!1})),s.f&&(s.f.jsonpHmr=function(e,r){t&&s.o(t,e)&&!t[e]&&(r.push(a(e)),t[e]=!0)})},s.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(s.p+s.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),s(76)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,